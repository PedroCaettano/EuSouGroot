#include "BinaryTree.h"
#include <iostream>
using namespace std;

BinaryTree::BinaryTree(){
    root = new TreeNode;
    root->Entry = 'A';

    root->LeftNode = new TreeNode;
    root->LeftNode->Entry = 'B';
    root->RightNode = new TreeNode;
    root->RightNode->Entry = 'C';
    
    root->LeftNode->LeftNode = new TreeNode;
    root->LeftNode->LeftNode->Entry = 'D';
    root->LeftNode->LeftNode->RightNode = NULL;
    root->LeftNode->RightNode = new TreeNode;
    root->LeftNode->RightNode->Entry = 'E';
    root->LeftNode->RightNode->LeftNode = NULL;
    root->LeftNode->RightNode->RightNode = NULL;

    root->LeftNode->LeftNode->LeftNode = new TreeNode;
    root->LeftNode->LeftNode->LeftNode->Entry = 'H';
    root->LeftNode->LeftNode->LeftNode->LeftNode = NULL;
    root->LeftNode->LeftNode->LeftNode->RightNode = NULL;

    root->RightNode->LeftNode = new TreeNode;
    root->RightNode->LeftNode->Entry = 'F';
    root->RightNode->RightNode = new TreeNode;
    root->RightNode->RightNode->Entry = 'G';
    root->RightNode->RightNode->LeftNode = NULL;
    root->RightNode->RightNode->RightNode = NULL;

    root->RightNode->LeftNode->LeftNode = new TreeNode;
    root->RightNode->LeftNode->RightNode = NULL;
    root->RightNode->LeftNode->LeftNode->Entry = 'I';
    root->RightNode->LeftNode->LeftNode->LeftNode = NULL;
    root->RightNode->LeftNode->LeftNode->RightNode = NULL;
}

void BinaryTree::PreOrder(){
PreOrder(root);
}

void BinaryTree::inOrder(){
InOrder(root);
}

void BinaryTree::PostOrder(){
InOrder(root);
}


void BinaryTree::inOrder(TreePointer r){

// Processando códigos nas árvores direita e esquerda

if(r!=NULL){
inOrder(r ->LeftNode);
cout<<r->Entry<<"";
inOrder(r ->RightNode);
}

}

void BinaryTree::PreOrder(TreePointer r){

// Processando códigos nas árvores direita e esquerda

if(r!=NULL){
cout<<r->Entry<<"";
PostOrder(r ->LeftNode);
PostOrder(r ->RightNode);
}

}

void BinaryTree::PostOrder(TreePointer r){

// Processando códigos nas árvores direita e esquerda

if(r!=NULL){
cout<<r->Entry<<"";
PostOrder(r ->LeftNode);
PostOrder(r ->RightNode);
}

}

int BinaryTree::QtdVertices(){
    return QtdVertices(root);
}

int BinaryTree::QtdVertices(TreePointer r){
inf (r == NULL){
return 0;
}
return 1 + QtdVertices(r->LeftNode) + QtdVertices(r->RightNode);
}
